name: "Netlify Deploy"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch or SHA-1 to deploy"
        required: true
        default: "master"
      context:
        description: "One of `production`, `deploy-preview`, `branch-deploy`, or a specific branch name"
        required: true
        default: "deploy-preview"
      environment:
        type: environment
        description: "The environment to deploy"
        required: true
        default: "master"
      prefix:
        description: "The prefix identifier for this job; i.e. `production` or `pr-123`"
        required: true
        default: "pr-"

jobs:
  detect_environments:
    name: "ðŸŽ› Detect Context"
    runs-on: ubuntu-latest

    outputs:
      context: ${{ steps.variables_prepare.outputs.context }}
      environment: ${{ steps.variables_prepare.outputs.environment }}
      prefix: ${{ steps.variables_prepare.outputs.prefix }}
      target_branch: ${{ steps.variables_prepare.outputs.target_branch }}

    steps:
      - name: "Environments Variables Prepare"
        id: variables_prepare
        run: |
          # Check the trigger for this Action
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Grab variables from Event Inputs
            CONTEXT="${{ github.event.inputs.context }}"
            PREFIX="${{ github.event.inputs.prefix }}"
            TARGET_BRANCH="${{ github.event.inputs.branch }}"
            ENVIRONMENT="${{ github.event.inputs.environment }}"

            # Check if the Branch is Valid
            TARGET_EXISTS=$(gh api /repos/${{ github.repository }}/commits/${TARGET_BRANCH} 2> /dev/null > /dev/null \
              && echo "true" || echo "false")

            if [ "${TARGET_EXISTS}" == "false" ]; then
              echo "::error::Input Branch Name refers to an unexisting branch or SHA1 of Repository : ${TARGET_BRANCH}"
              exit 1
            fi

          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            PREFIX="pr-${{ github.event.number }}"
            TARGET_BRANCH="${{ github.head_ref }}"

            if [ "${{ github.base_ref }}" == "master" ]; then
              ENVIRONMENT="production"
              CONTEXT="production"
            else
              echo "::error::Unknown Target Branch Name : ${{ github.base_ref }}"
              exit 1
            fi

          else
            TARGET_BRANCH="${{ github.ref_name }}"

            if [ "${TARGET_BRANCH}" == "master" ]; then
              ENVIRONMENT="production"
            else
              echo "::error::Unknown Target Branch Name : ${TARGET_BRANCH}"
              exit 1
            fi

            CONTEXT="${ENVIRONMENT}"
            PREFIX="${ENVIRONMENT}"
          fi

          echo "==[ CONTEXT INFORMATIONS ]============"
          echo "Event Name          : ${{ github.event_name }}"
          echo "Target Branch       : ${TARGET_BRANCH}"
          echo "Environment         : ${ENVIRONMENT}"
          echo "Context             : ${CONTEXT}"
          echo "Prefix              : ${PREFIX}"
          echo "======================================"

          echo "target_branch=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "context=${CONTEXT}" >> $GITHUB_OUTPUT
          echo "prefix=${PREFIX}" >> $GITHUB_OUTPUT

          echo "Variables exported through GITHUB_OUTPUT"

  deploy:
    name: "ðŸ›’ Deploy to Netlify"
    runs-on: ubuntu-latest
    needs:
      - detect_environments

    outputs:
      deploy_link: ${{ steps.deploy_link.outputs.deploy_link }}

    environment:
      name: ${{ needs.detect_environments.outputs.environment }}

    steps:
      - name: "ðŸ“© Checkout Project"
        if: ${{ !env.ACT }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.detect_environments.outputs.target_branch }}

      - name: "ðŸ“© Checkout Project"
        if: ${{ env.ACT }}
        uses: actions/checkout@v3

      - name: "ðŸ“© Restore Netlify cache"
        uses: actions/cache@v2
        with:
          path: .netlify
          key: cache-netlify-${{ needs.detect_environments.outputs.environment }}-${{ needs.detect_environments.outputs.prefix }}-${{ github.sha }}
          restore-keys: |
            cache-netlify-${{ needs.detect_environments.outputs.environment }}-${{ needs.detect_environments.outputs.prefix }}-
            cache-netlify-${{ needs.detect_environments.outputs.environment }}-${{ needs.detect_environments.outputs.environment }}-

      - name: "ðŸ“© Restore node_modules cache"
        uses: actions/cache@v2
        with:
          path: node_modules
          key: cache-deploy-node_modules-${{ needs.detect_environments.outputs.environment }}-${{ needs.detect_environments.outputs.prefix }}-${{ github.sha }}
          restore-keys: |
            cache-deploy-node_modules-${{ needs.detect_environments.outputs.environment }}-${{ needs.detect_environments.outputs.prefix }}-
            cache-deploy-node_modules-${{ needs.detect_environments.outputs.environment }}-${{ needs.detect_environments.outputs.environment }}-

      - name: "ðŸ“¦ Setup Node.js"
        if: ${{ !env.ACT }}
        uses: actions/setup-node@v3
        with:
          cache: "yarn"
          node-version: 16

      - name: "ðŸ¥¥ Setup Netlify"
        if: ${{ env.ACT }}
        run: |
          npm install -g netlify-cli

      - name: "ðŸ§¶ Install dependencies"
        run: |
          yarn install

      - name: "ðŸš€ Deploying"
        env:
          CONTEXT: ${{ needs.detect_environments.outputs.context }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          PREFIX: ${{ needs.detect_environments.outputs.prefix }}
        run: |
          netlify deploy \
            $(if [ "${PREFIX}" != "production" ]; then printf -- "--alias ${PREFIX}"; fi) \
            --build \
            --context ${CONTEXT} \
            $(if [ "${PREFIX}" == "production" ]; then printf -- '--prod'; fi)

      - name: "ðŸŒ‚ Get Site Info"
        id: site_info
        if: ${{ github.event_name == 'pull_request' }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          SITE_INFO=$(netlify api getSite --data "{ \"site_id\": \"${NETLIFY_SITE_ID}\" }")
          SITE_INFO="${SITE_INFO//'%'/'%25'}"
          SITE_INFO="${SITE_INFO//$'\n'/'%0A'}"
          SITE_INFO="${SITE_INFO//$'\r'/'%0D'}"
          SITE_NAME=${{ fromJson(env.SITE_INFO).name }}
          echo "site_name=${SITE_NAME}" >> $GITHUB_OUTPUT

      - name: "ðŸŒ‚ Deploy Preview Link"
        id: deploy_link
        if: ${{ github.event_name == 'pull_request' }}
        env:
          ENVIRONMENT: ${{ needs.detect_environments.outputs.environment }}
          PREFIX: ${{ needs.detect_environments.outputs.prefix }}
        run: |
          SITE_NAME=${{ steps.site_info.outputs.site_name }}
          SITE_PREFIX=$(if [ "$PREFIX" != "production" ]; then printf -- "${PREFIX}--"; fi)
          DEPLOY_LINK="https://${SITE_PREFIX}${SITE_NAME}.netlify.app"
          echo "deploy_link=${DEPLOY_LINK}" >> $GITHUB_OUTPUT
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' \
            --data "{ \
              \"context\": \"Netlify Deploy / â˜ƒ Preview ${ENVIRONMENT} (${{ github.event_name }})\",
              \"description\": \"Deploy Preview ready!\",
              \"state\": \"success\",
              \"target_url\": \"${DEPLOY_LINK}\"
            }" \
            --fail
